classdef ReportForModel < handle
    %REPORTFORMODEL Report for a single model from model collection
    %   One instance of this class is generated by one instance of
    %   emi.BaseModelMutator class
    
    properties
        exp_no;
        m_id;
        opens = [];
        exception = []; 
        exception_id = [] ;
        
        % Report for all generated mutants (before differential testing)
        % cell, initialized by client (e.g. BaseModelMutator)
        % Contains structs, not actual emi.ReportForMutant objects
        mutants = [] ; 
        exception_ob = [] ;
        
        % After differential testing
        
        % Was differential testing called?
        difftest_ran = false;
        
        % Instance of difftest.TesterReport. Already aggregated by
        % difftest.BaseTester (its go method)
        difftest_r;
    end
    
    methods
        function obj = ReportForModel(exp_no, m_id)
            obj.exp_no = exp_no;
            obj.m_id = m_id;
        end
        
        function ret = get_report(obj)
            ret = utility.get_struct_from_object(obj);
        end
        
        function ret = is_ok(obj)
            % Note: not checking mutant results
            ret = true;
            
            if ~isempty(obj.exception) && obj.exception
                ret = false;
            end
        end
        
        function ret = are_mutants_ok(obj)
            % Checks if ALL mutant generations are ok (not diff. testing)
            ret = true;
            
            if isempty(obj.mutants)
                return;
            end
            
            ret = all(cellfun(@(p)isempty(p.exception),obj.mutants));
        end
        
        function ret = difftest_ok(obj)
            % If difftest - before comparison and after comparison ok
            ret = ~ obj.difftest_ran || (...
                obj.difftest_r.is_ok && obj.difftest_r.is_comp_ok...
                );
        end
        
        function ret = valid_mutants(obj)
            ret = obj.mutants(cellfun(@(m)isempty(m.exception),...
                obj.mutants));
        end
        
    end
    
end

