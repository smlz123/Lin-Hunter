classdef FCB < emi.live.BaseLive
    % Wrap a block inside a always True branch
    % Also puts an assertion error in the always-false branch  
    
    properties
       new_ss;          % latest added action subsystem
       new_ss_h;
       
       all_new_ss;      % cell -- all added action subsystems
       all_new_ss_h     % cell
       
       if_cond_gen_blk; % block which generates the if condition
    end
    
    methods
        function obj = FCB(varargin)
            %Construct an instance of this class
            
            obj = obj@emi.live.BaseLive({
                @emi.livedecs.AddActionSubSystem
                @emi.livedecs.CopyToChild 
                @emi.livedecs.mcmc
                @emi.livedecs.addFCB
            }, varargin{:} );
        

            obj.all_new_ss = {};
            obj.all_new_ss_h = {};
            
            obj.if_cond_gen_blk = varargin{8};
        end

        function ret = choose_varargin(obj)
            try
                    [connections,sources,destinations] = emi.slsf.get_connections(block, true, true);
                catch e
                    rethrow(e);
            end
           is_block_not_action_subsystem = all(...
                ~strcmpi(connections{:, 'Type'}, 'ifaction'));
            
            is_if_block = strcmp(get_param(block, 'blockType'), 'If');
            
            if is_if_block || ~is_block_not_action_subsystem
                obj.r.n_live_skipped = obj.r.n_live_skipped + 1;
                return;
            end
            
            [block_parent, this_block] = utility.strip_last_split(block, '/');
            
%             hilite_system(block);
            
            % Pause for containing (parent) subsystem or the block iteself?
            pause_d = emi.pause_for_ss(block_parent, block);
            
            if pause_d
                % Enable breakpoints
                disp('Pause for debugging');
            end
            
            % To enable hilighting and pausing, uncomment the following:
%             emi.hilite_system(block, emi.cfg.DELETE_BLOCK_P || pause_ss);
%             emi.pause_interactive(emi.cfg.DELETE_BLOCK_P || pause_ss, 'Delete block %s', block);

            b1={};
            ret = b1(obj.r, block_parent, this_block,...
                connections, sources, destinations, is_if_block, obj.mutop_args);
        end
        
        function ret = is_compat(obj, varargin)
            % Check if this mutaiton is compatible for this block
            ret = ~isempty(obj.sources) && ~isempty(obj.destinations);
        end
        
    end
end

